// Auto-generated by @org.quicko/sheet-generator@6.0.2

import { Workbook, Sheet } from '@org.quicko/sheet-core';
import { Expose, Type } from 'class-transformer';
import { ValidateNested } from 'class-validator';
import 'reflect-metadata';
import { PurchaseSheet } from '../sheets/purchase-sheet/PurchaseSheet';
import { SignupSheet } from '../sheets/signup-sheet/SignupSheet';
import { ReferralSheet } from '../sheets/referral-sheet/ReferralSheet';
import { CommissionSheet } from '../sheets/commission-sheet/CommissionSheet';
import { LinkAnalyticsSheet } from '../sheets/link-analytics-sheet/LinkAnalyticsSheet';
import { PromoterAnalyticsSheet } from '../sheets/promoter-analytics-sheet/PromoterAnalyticsSheet';
import { MemberSheet } from '../sheets/member-sheet/MemberSheet';

@Reflect.metadata('name', 'PromoterWorkbook')
export class PromoterWorkbook extends Workbook {
    @Expose()
    @ValidateNested({ each: true })
    @Type(() => Sheet, {
        keepDiscriminatorProperty: true,
        discriminator: {
            property: 'name',
            subTypes: [
                {
					value: PurchaseSheet,
					name: 'purchase_sheet'
				},
				{
					value: SignupSheet,
					name: 'signup_sheet'
				},
				{
					value: ReferralSheet,
					name: 'referral_sheet'
				},
				{
					value: CommissionSheet,
					name: 'commission_sheet'
				},
				{
					value: LinkAnalyticsSheet,
					name: 'link_analytics_sheet'
				},
				{
					value: PromoterAnalyticsSheet,
					name: 'promoter_analytics_sheet'
				},
				{
					value: MemberSheet,
					name: 'member_sheet'
				}
            ],
        },
    })
    sheets: Array<Sheet> = new Array<Sheet>();
    
    addPurchaseSheet(sheet: PurchaseSheet): void {
        this.addSheet(sheet);
    }

    getPurchaseSheet(): PurchaseSheet {
        if (!this.getSheet('purchase_sheet')) {
            this.addSheet(new PurchaseSheet());
        }
        return this.getSheet('purchase_sheet') as PurchaseSheet;
    }

    addSignupSheet(sheet: SignupSheet): void {
        this.addSheet(sheet);
    }

    getSignupSheet(): SignupSheet {
        if (!this.getSheet('signup_sheet')) {
            this.addSheet(new SignupSheet());
        }
        return this.getSheet('signup_sheet') as SignupSheet;
    }

    addReferralSheet(sheet: ReferralSheet): void {
        this.addSheet(sheet);
    }

    getReferralSheet(): ReferralSheet {
        if (!this.getSheet('referral_sheet')) {
            this.addSheet(new ReferralSheet());
        }
        return this.getSheet('referral_sheet') as ReferralSheet;
    }

    addCommissionSheet(sheet: CommissionSheet): void {
        this.addSheet(sheet);
    }

    getCommissionSheet(): CommissionSheet {
        if (!this.getSheet('commission_sheet')) {
            this.addSheet(new CommissionSheet());
        }
        return this.getSheet('commission_sheet') as CommissionSheet;
    }

    addLinkAnalyticsSheet(sheet: LinkAnalyticsSheet): void {
        this.addSheet(sheet);
    }

    getLinkAnalyticsSheet(): LinkAnalyticsSheet {
        if (!this.getSheet('link_analytics_sheet')) {
            this.addSheet(new LinkAnalyticsSheet());
        }
        return this.getSheet('link_analytics_sheet') as LinkAnalyticsSheet;
    }

    addPromoterAnalyticsSheet(sheet: PromoterAnalyticsSheet): void {
        this.addSheet(sheet);
    }

    getPromoterAnalyticsSheet(): PromoterAnalyticsSheet {
        if (!this.getSheet('promoter_analytics_sheet')) {
            this.addSheet(new PromoterAnalyticsSheet());
        }
        return this.getSheet('promoter_analytics_sheet') as PromoterAnalyticsSheet;
    }

    addMemberSheet(sheet: MemberSheet): void {
        this.addSheet(sheet);
    }

    getMemberSheet(): MemberSheet {
        if (!this.getSheet('member_sheet')) {
            this.addSheet(new MemberSheet());
        }
        return this.getSheet('member_sheet') as MemberSheet;
    }
}