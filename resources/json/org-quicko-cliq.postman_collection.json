{
	"info": {
		"_postman_id": "607428ca-52a4-4082-ba9a-11c85d8ac880",
		"name": "org-quicko-cliq",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27391447",
		"_collection_link": "https://org-quicko.postman.co/workspace/org-quicko-cliq~4c4004ae-3dc4-4e08-8b99-97086c69755b/collection/27391447-607428ca-52a4-4082-ba9a-11c85d8ac880?action=share&source=collection_link&creator=27391447"
	},
	"item": [
		{
			"name": "Program",
			"item": [
				{
					"name": "Program",
					"item": [
						{
							"name": "Create program",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"program\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"currency\": { \"type\": \"string\" },\r",
											"        \"website\": { \"type\": \"string\" },\r",
											"        \"theme_color\": { \"type\": \"string\" },\r",
											"        \"referral_key_type\": { \"type\": \"string\", \"enum\": [\"phone\", \"email\"] },\r",
											"        \"time_zone\": { \"type\": \"string\" },\r",
											"        \"visibility\": { \"type\": \"string\", \"enum\": [\"public\", \"private\"] },\r",
											"        \"date_format\": { \"type\": \"string\", \"enum\": [\"DD/MM/YYYY\", \"MM/DD/YYYY\", \"YYYY/MM/DD\"] }\r",
											"    },\r",
											"    \"required\": [\"name\", \"currency\", \"website\", \"visibility\", \"referral_key_type\"]\r",
											"}\r",
											"//@endschema\r",
											"\r",
											"const cliqTestPackage = pm.require('@org-quicko/cliq-test-package');\r",
											"let body;\r",
											"\r",
											"pm.test('Assert request body structure is correct', () => {\r",
											"    body = JSON.parse(pm.request.body);\r",
											"    cliqTestPackage.validateJsonSchema(body, requestSchema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {
											"@org-quicko/cliq-test-package": {
												"id": "01963e94-c3a3-7f47-8dc8-fbf4a85fdf26"
											}
										}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"number\",\r",
											"            \"enum\": [201, 400, 401, 403, 500]\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"data\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"program_id\": { \"type\": \"string\", \"format\": \"uuid\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"website\": { \"type\": \"string\" },\r",
											"                \"theme_color\": { \"type\": \"string\" },\r",
											"                \"visibility\": { \"type\": \"string\", \"enum\": [\"public\", \"private\"] },\r",
											"                \"currency\": { \"type\": \"string\" },\r",
											"                \"date_format\": { \"type\": \"string\", \"enum\": [\"DD/MM/YYYY\", \"MM/DD/YYYY\", \"YYYY/MM/DD\"] },\r",
											"                \"time_zone\": { \"type\": \"string\" },\r",
											"                \"referral_key_type\": { \"type\": \"string\", \"enum\": [\"phone\", \"email\"] },\r",
											"                \"created_at\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
											"                \"updated_at\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
											"            },\r",
											"            \"required\": [\"program_id\", \"name\", \"currency\", \"website\", \"visibility\", \"referral_key_type\", \"created_at\", \"updated_at\"]\r",
											"        },\r",
											"    },\r",
											"};\r",
											"\r",
											"function assertEqual(actual, expected, field) {\r",
											"    const message = `Response body field '${field}' is not equal to its test case field.`;\r",
											"    try {\r",
											"        pm.expect(actual).to.equal(expected, message);\r",
											"    } catch (error) {\r",
											"        console.log(`Assertion Failed: Expected ${expected}, but got ${actual} | ${message}`);\r",
											"        throw error; // Ensures test still fails\r",
											"    }\r",
											"}\r",
											"\r",
											"function validateJsonSchema(body, schema) {\r",
											"    try {\r",
											"        pm.expect(body).to.have.jsonSchema(schema);\r",
											"    } catch (error) {\r",
											"        console.log(`Validation Failed: body ${JSON.stringify(body)} does not match the given schema.`);\r",
											"        console.error(error);\r",
											"        throw error;\r",
											"    }\r",
											"}\r",
											"\r",
											"function validateJsonSchemaAndValues(body, schema) {\r",
											"    try {\r",
											"        schema = addValuesToSchemaData(schema);\r",
											"        validateJsonSchema(body, schema);\r",
											"    } catch(error) {\r",
											"        throw error;\r",
											"    }\r",
											"}\r",
											"\r",
											"function addValuesToSchemaData(schema) {\r",
											"    const augmentedSchema = { ...schema };\r",
											"    const data = getDataFromIterationData();\r",
											"    for (const [key, value] of Object.entries(data)) {\r",
											"        if ([undefined, null].includes(value)) {\r",
											"            delete augmentedSchema[properties][data][properties][key];\r",
											"        } else {\r",
											"            augmentedSchema.properties.data.properties[key].constant = maskInfo(value);\r",
											"        }\r",
											"    }\r",
											"    \r",
											"    return augmentedSchema;\r",
											"}\r",
											"\r",
											"let responseBody;\r",
											"const code = pm.response.code;\r",
											"\r",
											"if (code >= 500) {\r",
											"    let maxRetries = 3;\r",
											"    let retryCount = parseInt(pm.environment.get(\"retryCount\")) || 0;\r",
											"\r",
											"    if (retryCount < maxRetries) {\r",
											"        retryCount++;\r",
											"        pm.environment.set(\"retryCount\", retryCount);\r",
											"\r",
											"        console.log(`Retry ${retryCount}/${maxRetries} - Retrying request`);\r",
											"        postman.setNextRequest(pm.info.requestName);\r",
											"    } else {\r",
											"        console.log(`Failed after ${maxRetries} retries.`);\r",
											"        pm.environment.unset(\"retryCount\");\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"\r",
											"const auxiliaryDataForResponseMessage = {\r",
											"    programId: pm.collectionVariables.get('program_id'),\r",
											"    refVal: requestBody.ref_val,\r",
											"    referralKeyType: pm.collectionVariables.get('referral_key_type'),\r",
											"    dateFormats: [\"DD/MM/YYYY\", \"MM/DD/YYYY\", \"YYYY/MM/DD\"],\r",
											"};\r",
											"\r",
											"pm.test('Assert response body is json', () => {\r",
											"    pm.response.to.be.json;\r",
											"    responseBody = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test(pm.iterationData.get('test_name') || 'API Integration Test', () => {\r",
											"    if (code == 201) {\r",
											"        pm.test('Assert response body structure is correct', () => {\r",
											"            validateJsonSchema(responseBody, responseSchema);\r",
											"        });\r",
											"\r",
											"        pm.collectionVariables.set('program', JSON.stringify(responseBody.data));\r",
											"        pm.collectionVariables.set('referral_key_type', responseBody.data.referral_key_type);\r",
											"        pm.collectionVariables.set('program_id', responseBody.data.program_id);\r",
											"\r",
											"        postman.setNextRequest('Get program');\r",
											"    }\r",
											"    else  {\r",
											"        let message = pm.iterationData.get('message');\r",
											"        for (const [key, value] of Object.entries(auxiliaryDataForResponseMessage)) {\r",
											"            message = message.replace(`{{${key}}}`, value);\r",
											"        }\r",
											"        assertEqual(body.message, message, 'message');\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"The Sith\",\r\n    \"currency\": \"INR\",\r\n    \"visibility\": \"public\",\r\n    \"referral_key_type\": \"phone\",\r\n    \"website\": \"www.example123.com\",\r\n    \"theme_color\": \"#4D5C92\",\r\n    \"time_zone\": \"IST\",\r\n    \"date_format\": \"DD/MM/YYYY\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs"
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Influencer program\",\r\n    \"currency\": \"USD\",\r\n    \"visibility\": \"public\",\r\n    \"website\": \"www.example.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully created program.\",\r\n    \"data\": {\r\n        \"program_id\": \"ewvkj2n73c8-=3=-h91bjb*^#@678$2\"\r\n    }\r\n}"
								},
								{
									"name": "403- Forbidden Resource- Not super admin",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Intermediates\",\r\n    \"currency\": \"INR\",\r\n    \"visibility\": \"public\",\r\n    \"referral_key_type\": \"email\",\r\n    \"website\": \"www.example987.com\",\r\n    \"time_zone\": \"IST\",\r\n    \"date_format\": \"DD/MM/YYYY\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "43"
										},
										{
											"key": "ETag",
											"value": "W/\"2b-XgbPHEJX9BUgUZyEhTnrgY+t41M\""
										},
										{
											"key": "Date",
											"value": "Mon, 03 Mar 2025 10:23:38 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 403,\n    \"message\": \"Forbidden resource\"\n}"
								}
							]
						},
						{
							"name": "Get program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const cliqTestPackage = pm.require('@org-quicko/cliq-test-package');\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"number\",\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"data\": {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"program_id\": { \"type\": \"string\", \"format\": \"uuid\" },\r",
											"                \"name\": { \"type\": \"string\" },\r",
											"                \"website\": { \"type\": \"string\" },\r",
											"                \"theme_color\": { \"type\": \"string\" },\r",
											"                \"visibility\": { \"type\": \"string\", \"enum\": [\"public\", \"private\"] },\r",
											"                \"currency\": { \"type\": \"string\" },\r",
											"                \"date_format\": { \"type\": \"string\", \"enum\": [\"DD/MM/YYYY\", \"MM/DD/YYYY\", \"YYYY/MM/DD\"] },\r",
											"                \"time_zone\": { \"type\": \"string\" },\r",
											"                \"referral_key_type\": { \"type\": \"string\", \"enum\": [\"phone\", \"email\"] },\r",
											"                \"created_at\": { \"type\": \"string\", \"format\": \"date-time\" },\r",
											"                \"updated_at\": { \"type\": \"string\", \"format\": \"date-time\" }\r",
											"            },\r",
											"            \"required\": [\"program_id\", \"name\", \"currency\", \"website\", \"visibility\", \"referral_key_type\", \"created_at\", \"updated_at\"]\r",
											"        },\r",
											"    },\r",
											"    \"required\": [\"code\", \"message\"]\r",
											"};\r",
											"\r",
											"let responseBody;\r",
											"const code = pm.response.code;\r",
											"\r",
											"if (code >= 500) {\r",
											"    let maxRetries = 3;\r",
											"    let retryCount = parseInt(pm.environment.get(\"retryCount\")) || 0;\r",
											"\r",
											"    if (retryCount < maxRetries) {\r",
											"        retryCount++;\r",
											"        pm.environment.set(\"retryCount\", retryCount);\r",
											"\r",
											"        console.log(`Retry ${retryCount}/${maxRetries} - Retrying request`);\r",
											"        postman.setNextRequest(pm.info.requestName);\r",
											"    } else {\r",
											"        console.log(`Failed after ${maxRetries} retries.`);\r",
											"        pm.environment.unset(\"retryCount\");\r",
											"    }\r",
											"    return;\r",
											"}\r",
											"\r",
											"pm.test('Assert response body is json', () => {\r",
											"    pm.response.to.be.json;\r",
											"    responseBody = pm.response.json();\r",
											"});\r",
											"\r",
											"let program = pm.collectionVariables.get('program');\r",
											"const programId = pm.collectionVariables.get('program_id');\r",
											"\r",
											"if (program) {\r",
											"    program = JSON.parse(program);\r",
											"    pm.test('Assert status code is 200', () => {\r",
											"        pm.expect(code).to.be.eql(200);\r",
											"    });\r",
											"\r",
											"    if (code == 200) {\r",
											"\r",
											"        pm.test('Assert response body structure is correct', () => {\r",
											"            cliqTestPackage.validateJsonSchema(responseBody, responseSchema);\r",
											"        });\r",
											"        \r",
											"        pm.test('Assert program ID is correct', () => {\r",
											"            pm.expect(responseBody.data.program_id).to.eql(programId);\r",
											"        });\r",
											"\r",
											"        pm.test('Assert program object matches the created program', () => {        \r",
											"\r",
											"            // updating the updated_at column in case the object was updated \r",
											"            program.updated_at = responseBody.data.updated_at;\r",
											"            pm.expect(responseBody.data).to.eql(program);\r",
											"        });\r",
											"    }\r",
											"\r",
											"} \r",
											"else if (code == 404) {\r",
											"    pm.test('Assert status code is 404', () => {\r",
											"        pm.expect(code).to.be.eql(404);\r",
											"        pm.expect(responseBody.message).to.include(`Error. Program ${programId} not found.`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {
											"@org-quicko/cliq-test-package": {
												"id": "01963e94-c3a3-7f47-8dc8-fbf4a85fdf26"
											}
										}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got program data.\",\r\n    \"data\": {\r\n        \"program\": {\r\n            \"program_id\": \"ewvkj2n73c8-=3=-h91bjb*^#@678$2\",\r\n            \"name\": \"Influencer program\",\r\n            \"website\": \"www.example.com\",\r\n            \"visibility\": \"public\",\r\n            \"currency\": \"USD\"\r\n        }\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Update program",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const tnc = `\r",
											"These Terms and Conditions govern your participation in the The Sith Affiliate Program. By signing up as an affiliate, you agree to abide by the terms detailed below.\r",
											"\r",
											"1. What is the Affiliate Program?\r",
											"The Sith's Affiliate Program is a performance-based partnership that rewards you for referring new users to The Sith's products and services. You'll earn a commission every time someone signs up or makes a purchase through your unique affiliate link.\r",
											"\r",
											"2. Who Can Join?\r",
											"Anyone over 18 years old with a valid Indian PAN and a functioning bank account can apply. We especially welcome bloggers, YouTubers, creators, educators, influencers, and community leaders who speak about finance, productivity, or digital tools.\r",
											"Once you apply, our team will review your submission. We reserve the right to approve or decline applications at our sole discretion, particularly if your content misrepresents or violates our brand principles.\r",
											"\r",
											"3. How It Works\r",
											"After approval, you'll receive a unique affiliate link. You can share it on your website, newsletter, social media, or any platform where you believe your audience would benefit from The Sith.\r",
											"Here's how your referrals will be counted:\r",
											"- A signup is when someone clicks your link and creates an account on The Sith, verifying their email.\r",
											"- A purchase is when someone who came through your link completes a paid transaction (like filing a return, paying a tax, or syncing an investment portfolio).\r",
											"To ensure attribution, both actions must be completed within 30 days of the user clicking your affiliate link. If multiple affiliates refer the same person, the last one gets the credit.\r",
											"\r",
											"4. What You'll Earn\r",
											"You'll earn a fixed commission for every verified signup, and a percentage of the total net value of any purchases made by your referrals.\r",
											"- For each verified signup: you earn a flat reward.\r",
											"- For every qualifying purchase: you earn a percentage of the amount paid (excluding taxes and refunds).\r",
											"There's no limit on how much you can earn.\r",
											"\r",
											"5. When and How You Get Paid\r",
											"Payments are processed once a month, by the 10th of the following month.\r",
											"To receive a payout:\r",
											"- You must have earned at least Rs. 500.\r",
											"- Your bank details must be correct and verified in your affiliate dashboard.\r",
											"Commissions below the threshold will roll over to the next month. All payments are made via NEFT or IMPS.\r",
											"\r",
											"6. What's Allowed and What's Not\r",
											"We want you to succeed — honestly and transparently.\r",
											"\r",
											"You can:\r",
											"- Write blog posts or make videos about your experience with The Sith.\r",
											"- Share your affiliate link on social media, email newsletters, and communities you actively participate in.\r",
											"- Promote through personal conversations and direct recommendations.\r",
											"\r",
											"You cannot:\r",
											"- Use Google Ads or any paid ads with brand terms like \"The Sith\".\r",
											"- Pretend to be The Sith or mislead users about our services.\r",
											"- Spam, mislead, or trick people into signing up.\r",
											"- Use your own link to claim commissions (self-referrals).\r",
											"Violating these rules may lead to account suspension and forfeiture of pending commissions.\r",
											"\r",
											"7. Tracking and Attribution\r",
											"Tracking is powered by browser cookies and is valid for 30 days after a user clicks your affiliate link. If the user clears cookies or uses a different browser/device, we may not be able to track them accurately.\r",
											"We recommend nudging your referrals to complete their signup or purchase in the same session for best results.\r",
											"\r",
											"8. Ending Your Participation\r",
											"You can opt out anytime by emailing us. Likewise, The Sith reserves the right to suspend or terminate your affiliate account at any time, especially in case of misuse, inactivity, or violations of these Terms.\r",
											"\r",
											"9. Liability Disclaimer\r",
											"While we do our best to track, report, and process payments accurately, The Sith is not liable for:\r",
											"- Technical glitches or tracking issues beyond our control.\r",
											"- Loss of commissions due to browser restrictions or user behavior.\r",
											"- Delays in payouts due to incomplete or incorrect information provided by you.\r",
											"\r",
											"10. Updates to This Policy\r",
											"These Terms may change from time to time. We'll notify you of significant updates, but it's your responsibility to stay informed. Your continued participation means you accept the updated Terms.\r",
											"\r",
											"11. Need Help?\r",
											"We're here for you. For any questions or issues, reach out to our team at affiliates@logoipsum.com\r",
											"\r",
											"Let's grow together.\r",
											"`\r",
											"\r",
											"const body = JSON.parse(pm.request.body.raw);\r",
											"body['terms_and_conditions'] = tnc;\r",
											"pm.request.body.raw = JSON.stringify(body);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"The Sith\",\r\n    \"website\": \"www.example123.com\",\r\n    \"theme_color\": \"#4D5C92\",\r\n    \"visibility\": \"public\",\r\n    \"currency\": \"INR\",\r\n    \"date_format\": \"DD/MM/YYYY\",\r\n    \"time_zone\": \"IST\",\r\n    \"referral_key_type\": \"phone\",\r\n    \"terms_and_conditions\": \"\\nThese Terms and Conditions govern your participation in the The Sith Affiliate Program. By signing up as an affiliate, you agree to abide by the terms detailed below.\\n\\n1. What is the Affiliate Program?\\nThe Sith's Affiliate Program is a performance-based partnership that rewards you for referring new users to The Sith's products and services. You'll earn a commission every time someone signs up or makes a purchase through your unique affiliate link.\\n\\n2. Who Can Join?\\nAnyone over 18 years old with a valid Indian PAN and a functioning bank account can apply. We especially welcome bloggers, YouTubers, creators, educators, influencers, and community leaders who speak about finance, productivity, or digital tools.\\nOnce you apply, our team will review your submission. We reserve the right to approve or decline applications at our sole discretion, particularly if your content misrepresents or violates our brand principles.\\n\\n3. How It Works\\nAfter approval, you'll receive a unique affiliate link. You can share it on your website, newsletter, social media, or any platform where you believe your audience would benefit from The Sith.\\nHere's how your referrals will be counted:\\n- A signup is when someone clicks your link and creates an account on The Sith, verifying their email.\\n- A purchase is when someone who came through your link completes a paid transaction (like filing a return, paying a tax, or syncing an investment portfolio).\\nTo ensure attribution, both actions must be completed within 30 days of the user clicking your affiliate link. If multiple affiliates refer the same person, the last one gets the credit.\\n\\n4. What You'll Earn\\nYou'll earn a fixed commission for every verified signup, and a percentage of the total net value of any purchases made by your referrals.\\n- For each verified signup: you earn a flat reward.\\n- For every qualifying purchase: you earn a percentage of the amount paid (excluding taxes and refunds).\\nThere's no limit on how much you can earn.\\n\\n5. When and How You Get Paid\\nPayments are processed once a month, by the 10th of the following month.\\nTo receive a payout:\\n- You must have earned at least Rs. 500.\\n- Your bank details must be correct and verified in your affiliate dashboard.\\nCommissions below the threshold will roll over to the next month. All payments are made via NEFT or IMPS.\\n\\n6. What's Allowed and What's Not\\nWe want you to succeed — honestly and transparently.\\n\\nYou can:\\n- Write blog posts or make videos about your experience with The Sith.\\n- Share your affiliate link on social media, email newsletters, and communities you actively participate in.\\n- Promote through personal conversations and direct recommendations.\\n\\nYou cannot:\\n- Use Google Ads or any paid ads with brand terms like \\\"The Sith\\\".\\n- Pretend to be The Sith or mislead users about our services.\\n- Spam, mislead, or trick people into signing up.\\n- Use your own link to claim commissions (self-referrals).\\nViolating these rules may lead to account suspension and forfeiture of pending commissions.\\n\\n7. Tracking and Attribution\\nTracking is powered by browser cookies and is valid for 30 days after a user clicks your affiliate link. If the user clears cookies or uses a different browser/device, we may not be able to track them accurately.\\nWe recommend nudging your referrals to complete their signup or purchase in the same session for best results.\\n\\n8. Ending Your Participation\\nYou can opt out anytime by emailing us. Likewise, The Sith reserves the right to suspend or terminate your affiliate account at any time, especially in case of misuse, inactivity, or violations of these Terms.\\n\\n9. Liability Disclaimer\\nWhile we do our best to track, report, and process payments accurately, The Sith is not liable for:\\n- Technical glitches or tracking issues beyond our control.\\n- Loss of commissions due to browser restrictions or user behavior.\\n- Delays in payouts due to incomplete or incorrect information provided by you.\\n\\n10. Updates to This Policy\\nThese Terms may change from time to time. We'll notify you of significant updates, but it's your responsibility to stay informed. Your continued participation means you accept the updated Terms.\\n\\n11. Need Help?\\nWe're here for you. For any questions or issues, reach out to our team at affiliates@logoipsum.com\\n\\nLet's grow together.\\n\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"StockBroker program\",\r\n    \"currency\": \"INR\",\r\n    \"visibility\": \"public\",\r\n    \"website\": \"www.example.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully updated program.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"\",\r\n    \"name\": \"\",\r\n    \"currency\": \"\",\r\n    \"visibility\": \"\",\r\n    \"website\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Get all programs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs"
									],
									"query": [
										{
											"key": "name",
											"value": "{{program_name}}",
											"disabled": true
										},
										{
											"key": "visibility",
											"value": "{{program_visibility}}",
											"description": "public / private",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "1",
											"disabled": true
										},
										{
											"key": "take",
											"value": "1",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all programs.\",\r\n    \"data\": {\r\n        \"programs\": [\r\n            {\r\n                \"name\": \"StockBroker program\",\r\n                \"currency\": \"INR\",\r\n                \"visibility\": \"public\",\r\n                \"website\": \"www.example.com\"\r\n            },\r\n            {\r\n                \"name\": \"Bankers program\",\r\n                \"currency\": \"EUR\",\r\n                \"visibility\": \"public\",\r\n                \"website\": \"www.mockXplain.com\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Delete program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let responseBody;\r",
											"const code = pm.response.code;\r",
											"\r",
											"pm.test('Assert response body is json', () => {\r",
											"    pm.response.to.be.json;\r",
											"    responseBody = pm.response.json();\r",
											"});\r",
											"\r",
											"if (code == 200) {\r",
											"    pm.collectionVariables.set('program', undefined);\r",
											"}\r",
											"else if (code >= 500) {\r",
											"    let maxRetries = 3;\r",
											"    let retryCount = parseInt(pm.environment.get(\"retryCount\")) || 0;\r",
											"\r",
											"    if (retryCount < maxRetries) {\r",
											"        retryCount++;\r",
											"        pm.environment.set(\"retryCount\", retryCount);\r",
											"\r",
											"        console.log(`Retry ${retryCount}/${maxRetries} - Retrying request`);\r",
											"        postman.setNextRequest(pm.info.requestName);\r",
											"    } else {\r",
											"        console.log(`Failed after ${maxRetries} retries.`);\r",
											"        pm.environment.unset(\"retryCount\");\r",
											"    }\r",
											"    return;\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully deleted program.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Invite user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"user\" },\r",
											"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
											"        \"password\": { \"type\": \"string\" },\r",
											"        \"first_name\": { \"type\": \"string\" },\r",
											"        \"last_name\": { \"type\": \"string\" },\r",
											"        \"role\": { \"type\": \"string\", \"enum\": [\"admin\", \"editor\", \"viewer\"] }\r",
											"    },\r",
											"    \"required\": [\"email\", \"password\"]\r",
											"}\r",
											"//@endschema\r",
											"\r",
											"const cliqTestPackage = pm.require('@org-quicko/cliq-test-package');\r",
											"let body;\r",
											"\r",
											"pm.test('Assert request body structure is correct', () => {\r",
											"    body = JSON.parse(pm.request.body);\r",
											"    cliqTestPackage.validateJsonSchema(body, requestSchema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {
											"@org-quicko/cliq-test-package": {
												"id": "01963e94-c3a3-7f47-8dc8-fbf4a85fdf26"
											}
										}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const cliqTestPackage = pm.require('@org-quicko/cliq-test-package');\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"number\",\r",
											"            \"enum\": [201, 400, 404, 409, 500]\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\",\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"const programId = pm.collectionVariables.get('program_id');\r",
											"let responseBody;\r",
											"const code = pm.response.code;\r",
											"\r",
											"\r",
											"pm.test('Assert response body is json', () => {\r",
											"    pm.response.to.be.json;\r",
											"    responseBody = pm.response.json();\r",
											"});\r",
											"\r",
											"pm.test('Assert response body structure is correct', () => {\r",
											"    cliqTestPackage.validateJsonSchema(responseBody, responseSchema);\r",
											"});\r",
											"\r",
											"if (code == 201) {\r",
											"    pm.test('Assert success message is correct', () => {\r",
											"        pm.expect(responseBody.message).to.be.eql('Successfully added user to program.');\r",
											"    });\r",
											"}\r",
											"else if (code == 400) {\r",
											"    pm.test('Assert that the bad request error message is correct', () => {\r",
											"        pm.expect(responseBody.message).to.match(/^Validation Errors: .+/);\r",
											"    });\r",
											"}\r",
											"else if (code == 404)  {\r",
											"    pm.test('Assert not found error message is correct', () => {\r",
											"        pm.expect(responseBody.message).to.be.eql(`Error. Program ${programId} not found.`);\r",
											"    });\r",
											"}\r",
											"else if (code == 409) {\r",
											"    pm.test('Assert conflict error message is correct', () => {\r",
											"        pm.expect(responseBody.message).to.be.eql('Failed to invite user. User is already part of the program.');\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {
											"@org-quicko/cliq-test-package": {
												"id": "01963e94-c3a3-7f47-8dc8-fbf4a85fdf26"
											}
										}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aakash@mail.com\",\r\n    \"password\": \"nice\",\r\n    \"first_name\": \"Aakash\",\r\n    \"last_name\": \"Jha\",\r\n    \"role\": \"editor\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/invite",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"invite"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"john@mail.com\",\r\n    \"password\": \"knw97890un\",\r\n    \"first_name\": \"John\",\r\n    \"last_name\": \"Bennington\",\r\n    \"role\": \"MEMBER\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/invite",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"invite"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully invited user to program\",\r\n    \"data\": {\r\n        \"user_id\": \"r3y10jij&78=-=-%^&%%\"\r\n    }\r\n}"
								},
								{
									"name": "failure- user already part of program",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"john@mail.com\",\r\n    \"password\": \"knw97890un\",\r\n    \"first_name\": \"John\",\r\n    \"last_name\": \"Bennington\",\r\n    \"role\": \"MEMBER\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/invite",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"invite"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"Invalid request. User is already part of the program.\"\r\n}"
								}
							]
						},
						{
							"name": "Get all users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"users"
									],
									"query": [
										{
											"key": "status",
											"value": "{{user_status}}",
											"description": "Filter users by status: active/inactive/pending",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										},
										{
											"key": "role",
											"value": "{{user_role}}",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/users",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"users"
											],
											"query": [
												{
													"key": "status",
													"value": "active",
													"description": "Filter users by status: active/inactive/pending",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all program users.\",\r\n    \"data\": {\r\n        \"users\": [\r\n            {\r\n                \"user_id\": \"123\",\r\n                \"email\": \"john@mail.com\",\r\n                \"first_name\": \"John\",\r\n                \"last_name\": \"Bennington\"\r\n            },\r\n            {\r\n                \"user_id\": \"456\",\r\n                \"email\": \"jane@mail.com\",\r\n                \"first_name\": \"Jane\",\r\n                \"last_name\": \"Doe\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Update role",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"viewer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/users/:user_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"role\": \"ADMIN\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/users/:user_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully changed user role.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"role\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/users/:user_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Remove user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"number\",\r",
											"            \"enum\": [201, 404, 500]\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\",\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"let responseBody;\r",
											"const code = pm.response.code;\r",
											"const programId = pm.collectionVariables.get('program_id');\r",
											"const removedUserId = pm.collectionVariables.get('removed_user_id');\r",
											"\r",
											"pm.test('Assert response body is json', () => {\r",
											"    pm.response.to.be.json;\r",
											"    responseBody = pm.response.json();\r",
											"});\r",
											"\r",
											"// 2 possibilities -> program doesn't exist, or user doesn't exist in program\r",
											"if (code == 404) {\r",
											"    pm.test('Assert not found error message', () => {\r",
											"        pm.expect(responseBody.message).to.be.oneOf([\r",
											"            `Error. Program ${programId} not found.`,\r",
											"            `Error. User ${removedUserId} not found in Program ${programId}.`\r",
											"        ])\r",
											"    });\r",
											"} \r",
											"else if (code == 200) {\r",
											"    pm.test('Assert success message', () => {\r",
											"        pm.expect(responseBody.message).to.be.eql(`Successfully removed user from program.`);\r",
											"    });\r",
											"}\r",
											"\r",
											"pm.collectionVariables.unset('removed_user_id');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const removedUserId = pm.request.url.variables.get('user_id');\r",
											"pm.collectionVariables.set('removed_user_id', removedUserId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/users/:user_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								},
								"description": "Mark user status as inactive"
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/users/:user_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully removed user from program.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/users/:user_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Get all promoters",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters"
									],
									"query": [
										{
											"key": "name",
											"value": null,
											"disabled": true
										},
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get signups in program",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/signups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"signups"
									],
									"query": [
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/contacts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"contacts"
											],
											"query": [
												{
													"key": "promoter_id",
													"value": null,
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully listed all contacts of program.\",\r\n    \"data\": {\r\n        \"contacts\": [\r\n            {\r\n                \"contact_id\": \"wdhfueiwhortiewwyur8923y\",\r\n                \"email\": \"beethoven@mail.com\",\r\n                \"first_name\": \"Ludwig\",\r\n                \"last_name\": \"Van Beethoven\",\r\n                \"phone\": \"1234567899\"\r\n            },\r\n            {\r\n                \"contact_id\": \"wdhfueiwhortiewwyur8923y\",\r\n                \"email\": \"leonardo@mail.com\",\r\n                \"first_name\": \"Leonardo\",\r\n                \"last_name\": \"Da Vinci\",\r\n                \"phone\": \"1234567890\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Get purchases in program",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/purchases",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"purchases"
									],
									"query": [
										{
											"key": "item_id",
											"value": "some_item_id",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/purchases",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"purchases"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all purchases of program.\",\r\n    \"data\": {\r\n        \"purchases\": [\r\n            {\r\n                \"purchase_id\": \"dunewcdf8927yr8ikh\",\r\n                \"email\": \"beethoven@mail.com\",\r\n                \"first_name\": \"Ludwig\",\r\n                \"last_name\": \"Van Beethoven\",\r\n                \"phone\": \"1234567899\"\r\n            },\r\n            {\r\n                \"purchase_id\": \"dunewcdf8927yr8ikh\",\r\n                \"email\": \"leonardo@mail.com\",\r\n                \"first_name\": \"Leonardo\",\r\n                \"last_name\": \"Da Vinci\",\r\n                \"phone\": \"1234567890\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Get all commissions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/commissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"commissions"
									],
									"query": [
										{
											"key": "conversion_type",
											"value": "",
											"description": "CONTACT / PURCHASE",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/commissions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"commissions"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all commissions for program.\",\r\n    \"data\": [\r\n        \"commissions\": [\r\n            {\r\n                \"commission_id\": \"123\",\r\n                \"conversion_id\": \"233v4g23f\",\r\n                \"conversion_type\": \"CONTACT\",\r\n                \"amount\": 50\r\n            },\r\n            {\r\n                \"commission_id\": \"457\",\r\n                \"conversion_id\": \"23983hc9cn\",\r\n                \"conversion_type\": \"PURCHASE\",\r\n                \"amount\": 80\r\n            }\r\n        ]\r\n    ]\r\n}"
								}
							]
						},
						{
							"name": "Get program report",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const reportPeriods = [\"this_week\", \"this_month\", \"last_7_days\", \"last_30_days\", \"last_90_days\", \"custom\"];\r",
											"\r",
											"pm.test(\"Query params are valid\", () => {\r",
											"    const reportPeriod = pm.request.url.query.get(\"report_period\");\r",
											"\r",
											"    if (reportPeriod) {\r",
											"        pm.expect(reportPeriod).to.be.oneOf(reportPeriods); \r",
											"    }\r",
											"\r",
											"    if (reportPeriod === \"custom\") {\r",
											"        const startDate = pm.request.url.query.get(\"start_date\");\r",
											"        const endDate = pm.request.url.query.get(\"end_date\");\r",
											"\r",
											"        pm.expect(startDate, \"start_date must be provided\").to.not.be.null;\r",
											"        pm.expect(endDate, \"end_date must be provided\").to.not.be.null;\r",
											"\r",
											"        const isStartValid = !isNaN(new Date(startDate).getTime());\r",
											"        const isEndValid = !isNaN(new Date(endDate).getTime());\r",
											"\r",
											"        pm.expect(isStartValid, `start_date is not a valid date: ${startDate}`).to.be.true;\r",
											"        pm.expect(isEndValid, `end_date is not a valid date: ${endDate}`).to.be.true;\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const code = pm.response.code;\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"number\",\r",
											"            \"enum\": [201, 404, 500]\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\",\r",
											"        }\r",
											"    }\r",
											"};\r",
											"\r",
											"let responseBody;\r",
											"\r",
											"pm.test('Assert response body is json', () => {\r",
											"    pm.response.to.be.json;\r",
											"    responseBody = pm.response.json();\r",
											"});\r",
											"\r",
											"if (code == 200) {\r",
											"    pm.test('Assert correct content type header', () => {\r",
											"        pm.response.to.have.header('Content-Type');\r",
											"        const contentType = pm.response.headers.get('Content-Type');\r",
											"        pm.expect(contentType).to.include('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\r",
											"    });\r",
											"\r",
											"    const fileName = 'Program Report.xlsx';\r",
											"\r",
											"    pm.test('Assert correct content disposition header', () => {\r",
											"        pm.response.to.have.header('Content-Disposition');\r",
											"        const contentDisposition = pm.response.headers.get('Content-Disposition');\r",
											"        console.log(contentDisposition);\r",
											"        pm.expect(contentDisposition).to.include(`attachment; filename=\"${fileName}\"`);\r",
											"    });\r",
											"} else if (code == 400) {\r",
											"    pm.test('Assert that the bad request error message is correct', () => {\r",
											"        pm.expect(responseBody.message).to.be.oneOf([\r",
											"            'Error. start and end date must be provided for a custom report period',\r",
											"            'Incorrect report period passed.',\r",
											"            'Invalid start date format.',\r",
											"            'Invalid end date format.',\r",
											"            'Start date must be before End date.'\r",
											"        ])\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/report?report_period=custom",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"report"
									],
									"query": [
										{
											"key": "start_date",
											"value": "03/09/2024",
											"disabled": true
										},
										{
											"key": "end_date",
											"value": "04/20/2025",
											"disabled": true
										},
										{
											"key": "report_period",
											"value": "custom"
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all program referrals",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseSchema = {\r",
											"    \"type\": 'object',\r",
											"    \"properties\": {\r",
											"        \"code\": {\r",
											"            \"type\": \"number\",\r",
											"        },\r",
											"        \"message\": {\r",
											"            \"type\": \"string\",\r",
											"        },\r",
											"        \"data\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"contact_id\": { \"type\": 'string', \"format\": 'uuid' },\r",
											"                    \"program_id\": { \"type\": 'string', \"format\": 'uuid' },\r",
											"                    \"promoter_id\": { \"type\": 'string', \"format\": 'uuid' },\r",
											"                    \"contact_info\": { \"type\": 'string' },\r",
											"                    \"status\": { \"type\": 'string', \"enum\": [\"active\", \"lead\"] },\r",
											"                    \"currency\": { \"type\": 'string' },\r",
											"                    \"total_commission\": { \"type\": 'number' },\r",
											"                    \"total_revenue\": { \"type\": 'number' },\r",
											"                    \"created_at\": { \"type\": 'string', \"format\": 'date-time' },\r",
											"                    \"updated_at\": { \"type\": 'string', \"format\": 'date-time' }\r",
											"                },\r",
											"                \"required\": [\"contact_id\", \"program_id\", \"promoter_id\", \"contact_info\", \"status\", \"total_commission\", \"total_revenue\", \"updated_at\"]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"code\", \"message\"]\r",
											"}\r",
											"\r",
											"const cliqTestPackage = pm.require('@org-quicko/cliq-test-package');\r",
											"\r",
											"let responseBody;\r",
											"const code = pm.response.code;\r",
											"const programId = pm.collectionVariables.get('program_id');\r",
											"\r",
											"pm.test('Assert response body is json', () => {\r",
											"    pm.response.to.be.json;\r",
											"    responseBody = pm.response.json();\r",
											"});\r",
											"\r",
											"if (code == 200) {\r",
											"    pm.test('Assert response body structure is correct', () => {\r",
											"        cliqTestPackage.validateJsonSchema(responseBody, responseSchema);\r",
											"    })\r",
											"}\r",
											"else if (code == 404) {\r",
											"    pm.test('Assert that the bad request error message is correct', () => {\r",
											"        pm.expect(responseBody.message).to.eql(`Error. Program ${programId} not found.`);\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {
											"@org-quicko/cliq-test-package": {
												"id": "01963e94-c3a3-7f47-8dc8-fbf4a85fdf26"
											}
										}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/referrals",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"referrals"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "User sign up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"user\" },\r",
											"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
											"        \"password\": { \"type\": \"string\" },\r",
											"        \"first_name\": { \"type\": \"string\" },\r",
											"        \"last_name\": { \"type\": \"string\" },\r",
											"        \"role\": { \"type\": \"string\", \"enum\": [\"admin\", \"member\"] }\r",
											"    },\r",
											"    \"required\": [\"email\", \"password\"]\r",
											"}\r",
											"//@endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"tryme@mail.com\",\r\n    \"password\": \"tryme\",\r\n    \"first_name\": \"Try\",\r\n    \"last_name\": \"me\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"signup"
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully signed up user.\"\r\n}"
								}
							]
						},
						{
							"name": "User log in",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
											"        \"password\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"email\", \"password\"]\r",
											"}\r",
											"//@endschema\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {\r",
											"    const userAccessToken = pm.response.json().data.access_token;\r",
											"    pm.environment.set('user_access_token', userAccessToken);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john@mail.com\",\r\n    \"password\": \"nice\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully logged in user.\",\r\n    \"data\": {\r\n        \"token\": \"ehf23ghf2ndwhn%^82ewh\"\r\n    }\r\n}"
								},
								{
									"name": "failure- incorrect credentials",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"Incorrect credentials. Please try again.\"\r\n}"
								},
								{
									"name": "201- super admin login",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"john@mail.com\",\r\n    \"password\": \"nice\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "349"
										},
										{
											"key": "ETag",
											"value": "W/\"15d-bq7ZasflrL5zdtXly/aZJpbDVng\""
										},
										{
											"key": "Date",
											"value": "Tue, 04 Mar 2025 09:46:23 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"message\": \"Successfully logged in user.\",\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkMDE1MjViNy1kMGRjLTRkZWMtODI3MS00OTQ4OTVkODA1NDUiLCJlbWFpbCI6ImpvaG5AbWFpbC5jb20iLCJpc19zdXBlcl9hZG1pbiI6dHJ1ZSwiaXNfdXNlciI6dHJ1ZSwiaWF0IjoxNzQxMDgxNTgzLCJleHAiOjE3NDExNjc5ODN9.7pFoRNa9q2OY0uznh3BYP_5Q_El8q04qTTQtpuh2LVs\"\n    }\n}"
								},
								{
									"name": "201- non super admin user login",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"jane@mail.com\",\r\n    \"password\": \"nice\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "351"
										},
										{
											"key": "ETag",
											"value": "W/\"15f-3xz+4GcM4N7PuQ22L2nkcbWDt1s\""
										},
										{
											"key": "Date",
											"value": "Tue, 04 Mar 2025 09:46:52 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"message\": \"Successfully logged in user.\",\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNDJmMzBkYS1jYzJhLTQwYTItYjIyZS05OTA3MDkyOTQyZDkiLCJlbWFpbCI6ImphbmVAbWFpbC5jb20iLCJpc19zdXBlcl9hZG1pbiI6ZmFsc2UsImlzX3VzZXIiOnRydWUsImlhdCI6MTc0MTA4MTYxMiwiZXhwIjoxNzQxMTY4MDEyfQ.t21YkSxMn_aDZfHiGytBiNrUO794a19wN83svZtjZg4\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/:user_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/:user_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got user information.\",\r\n    \"data\": {\r\n        \"user\": {\r\n            \"user_id\": \"123\",\r\n            \"email\": \"john@mail.com\",\r\n            \"first_name\": \"John\",\r\n            \"last_name\": \"Bennington\"\r\n        }\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Update User info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"user\" },\r",
											"        \"user_id\": { \"type\": \"string\" },\r",
											"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
											"        \"password\": { \"type\": \"string\" },\r",
											"        \"first_name\": { \"type\": \"string\" },\r",
											"        \"last_name\": { \"type\": \"string\" },\r",
											"        \"role\": { \"type\": \"string\", \"enum\": [\"admin\", \"member\"] }\r",
											"    },\r",
											"    \"required\": [\"email\", \"password\"]\r",
											"}\r",
											"//@endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"first_name\": \"Try\",\r\n    \"last_name\": \"Me\"\r\n    // \"current_password\": \"nice\",\r\n    // \"new_password\": \"1nfu$10n\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/users/:user_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/users/:user_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIzNDJmMzBkYS1jYzJhLTQwYTItYjIyZS05OTA3MDkyOTQyZDkiLCJlbWFpbCI6ImphbmVAbWFpbC5jb20iLCJpc19zdXBlcl9hZG1pbiI6ZmFsc2UsImlhdCI6MTc0MDk5ODMwNCwiZXhwIjoxNzQxMDg0NzA0fQ.DUeKRaUDIt2GAOhh7hQZmXGHz3_1pSpNfiYGUJXiFgU",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/:user_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										":user_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/users/:user_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully deleted user.\"\r\n}"
								}
							]
						},
						{
							"name": "Leave Program",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/users/:user_id/programs/:program_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"users",
										":user_id",
										"programs",
										":program_id"
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										},
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Circle",
					"item": [
						{
							"name": "Create circle",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"circle\" },\r",
											"        \"name\": {\r",
											"            \"type\": \"string\"\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"name\"]\r",
											"}\r",
											"// @endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"nice cirlcle\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/circles",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"circles"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Beginners\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully created circle.\",\r\n    \"data\": {\r\n        \"circle_id\": \"kewmf2oi3nfnvoine\"\r\n    }\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Beginners\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Get all circles",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/circles",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"circles"
									],
									"query": [
										{
											"key": "name",
											"value": "",
											"description": "name of circle",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles"
											],
											"query": [
												{
													"key": "name",
													"value": "",
													"description": "name of circle",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all circles.\",\r\n    \"data\": {\r\n        \"circles\": [\r\n            {\r\n                \"circle_id\": \"23kjcn2uvhn29\",\r\n                \"name\": \"Beginners\"\r\n            },\r\n            {\r\n                \"circle_id\": \"wev123r9qkweno-vndkv\",\r\n                \"name\": \"Intermediates\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Add promoter",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"promoters\": [\"{{promoter_id}}\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/circles/:circle_id/promoters",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"circles",
										":circle_id",
										"promoters"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "circle_id",
											"value": "{{circle_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"promoter_ids\": [\"ids\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles/:circle_id/promoters",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles",
												":circle_id",
												"promoters"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "circle_id",
													"value": "{{circle_id}}"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully added promoter to circle.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"promoter_ids\": [\"ids\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles/:circle_id/promoters",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles",
												":circle_id",
												"promoters"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "circle_id",
													"value": "{{circle_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Get all Promoters",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/circles/:circle_id/promoters",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"circles",
										":circle_id",
										"promoters"
									],
									"query": [
										{
											"key": "promoter_name",
											"value": "",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "circle_id",
											"value": "{{circle_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles/:circle_id/promoters",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles",
												":circle_id",
												"promoters"
											],
											"query": [
												{
													"key": "promoter_name",
													"value": "",
													"disabled": true
												},
												{
													"key": "promoter_id",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "circle_id",
													"value": "{{circle_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all promoters.\",\r\n    \"data\": {\r\n        \"promoters\": [\r\n            {\r\n                \"promoter_id\": \"2kj3nf2o3ivnfeiwnv\",\r\n                \"name\": \"The Affiliate Man\"\r\n            },\r\n            {\r\n                \"promoter_id\": \"13jnfkj2nfewve\",\r\n                \"name\": \"Affiliate Warriors\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Get circle",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/circles/:circle_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"circles",
										":circle_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "circle_id",
											"value": "{{circle_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles/:circle_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles",
												":circle_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "circle_id",
													"value": "23kjcn2uvhn29"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got circle.\",\r\n    \"data\": {\r\n        \"circle\": {\r\n            \"circle_id\": \"23kjcn2uvhn29\",\r\n            \"name\": \"Beginners\"\r\n        }\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Remove promoter",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/circles/:circle_id/promoters/:promoter_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"circles",
										":circle_id",
										"promoters",
										":promoter_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "circle_id",
											"value": "{{circle_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles/:circle_id/promoters/:promoter_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles",
												":circle_id",
												"promoters",
												":promoter_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": ""
												},
												{
													"key": "circle_id",
													"value": ""
												},
												{
													"key": "promoter_id",
													"value": ""
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully removed promoter from circle.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles/:circle_id/promoters/:promoter_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles",
												":circle_id",
												"promoters",
												":promoter_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": ""
												},
												{
													"key": "circle_id",
													"value": ""
												},
												{
													"key": "promoter_id",
													"value": ""
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Delete circle",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/circles/:circle_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"circles",
										":circle_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "circle_id",
											"value": "{{circle_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/circles/:circle_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"circles",
												":circle_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "circle_id",
													"value": "{{circle_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully deleted circle.\"\r\n}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Function",
					"item": [
						{
							"name": "Create function",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"function\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"trigger\": { \"type\": \"string\", \"enum\": [\"signup\", \"purchase\"] },\r",
											"        \"commission_type\": { \"type\": \"string\", \"enum\": [\"fixed\", \"percentage\"] },\r",
											"        \"commission_value\": { \"type\": \"number\" },\r",
											"        \"effect_type\": { \"type\": \"string\" },\r",
											"        \"conditions\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"parameter\": { \"type\": \"string\" },\r",
											"                    \"operator\": { \"type\": \"string\" },\r",
											"                    \"value\": { \"type\": \"string\" }\r",
											"                },\r",
											"                \"required\": [\"parameter\", \"operator\", \"value\"]\r",
											"            }\r",
											"        },\r",
											"        \"circle\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"name\", \"trigger\", \"commission_type\", \"commission_value\"]\r",
											"};\r",
											"//@endschema\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Delete me\",\r\n    \"trigger\": \"purchase\",\r\n    \"effect_type\": \"generate_commission\",\r\n    \"effect\": {\r\n        \"commission\": {\r\n            \"commission_type\": \"percentage\",\r\n            \"commission_value\": 10\r\n        }\r\n    },\r\n    \"conditions\": [\r\n        {\r\n            \"condition\": {\r\n                \"parameter\": \"no. of purchases\",\r\n                \"operator\": \"less_than_or_equal_to\",\r\n                \"value\": 30\r\n            }\r\n        }\r\n    ],\r\n    \"circle_id\": \"c57238c8-02d2-46c6-94ea-7d1290c2cadb\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/functions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"functions"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Beginner function\",\r\n    \"trigger\": \"PURCHASE\",\r\n    \"commission_type\": \"FIXED\",\r\n    \"commission_value\": 50,\r\n    \"effect\": \"SWITCH_TO_DIFF_CIRCLE\",\r\n    \"conditions\": [\r\n        {\r\n            \"parameter\": \"purchase amount\",\r\n            \"operator\": \"greater than\",\r\n            \"value\": 3000\r\n        }\r\n    ],\r\n    \"circle\": \"DEFAULT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions"
											],
											"variable": [
												{
													"key": "program_id",
													"value": ""
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully created function.\",\r\n    \"data\": {\r\n        \"function_id\": \"23kjnf982n3cuibn1\"\r\n    }\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Beginner function\",\r\n    \"trigger\": \"PURCHASE\",\r\n    \"commission_type\": \"FIXED\",\r\n    \"commission_value\": 50,\r\n    \"effect\": \"SWITCH_TO_DIFF_CIRCLE\",\r\n    \"conditions\": [\r\n        {\r\n            \"parameter\": \"purchase amount\",\r\n            \"operator\": \"greater than\",\r\n            \"value\": 3000\r\n        }\r\n    ],\r\n    \"circle\": \"DEFAULT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions"
											],
											"variable": [
												{
													"key": "program_id",
													"value": ""
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								},
								{
									"name": "201- (switch circle) created",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Cool function\",\r\n    \"trigger\": \"purchase\",\r\n    \"effect_type\": \"switch_circle\",\r\n    \"effect\": {\r\n        \"target_circle_id\": \"c02193dd-6cc9-45f2-aadf-be7be0a40ee2\"\r\n    },\r\n    \"conditions\": [\r\n        {\r\n            \"parameter\": \"no. of purchases\",\r\n            \"operator\": \"less_than_or_equal_to\",\r\n            \"value\": 1\r\n        }\r\n    ],\r\n    \"circle_id\": \"b110bcae-ea27-4a0a-bbd8-e5b202dd4461\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "479"
										},
										{
											"key": "ETag",
											"value": "W/\"1df-ZIR9bH8d2bocE7LjvzrxkXSv5ck\""
										},
										{
											"key": "Date",
											"value": "Thu, 27 Feb 2025 06:21:54 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"message\": \"Successfully created function.\",\n    \"data\": {\n        \"function_id\": \"3ea88701-c898-4adb-8f13-053e73f5c4b1\",\n        \"name\": \"Cool function\",\n        \"circle_id\": \"b110bcae-ea27-4a0a-bbd8-e5b202dd4461\",\n        \"circle_name\": \"noobs\",\n        \"effect_type\": \"switch_circle\",\n        \"effect\": {\n            \"target_circle_id\": \"c02193dd-6cc9-45f2-aadf-be7be0a40ee2\"\n        },\n        \"conditions\": [\n            {\n                \"value\": 1,\n                \"operator\": \"less_than_or_equal_to\",\n                \"parameter\": \"no. of purchases\"\n            }\n        ],\n        \"created_at\": \"11:51:54.962746+05:30\",\n        \"updated_at\": \"11:51:54.962746+05:30\"\n    }\n}"
								},
								{
									"name": "400- (generate commission) percentage negative value",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Cool function\",\r\n    \"trigger\": \"purchase\",\r\n    \"effect_type\": \"generate_commission\",\r\n    \"effect\": {\r\n        \"commission\": {\r\n            \"commission_type\": \"percentage\",\r\n            \"commission_value\": -1\r\n        }\r\n    },\r\n    \"conditions\": [\r\n        {\r\n            \"parameter\": \"no. of purchases\",\r\n            \"operator\": \"less_than_or_equal_to\",\r\n            \"value\": 1\r\n        }\r\n    ],\r\n    \"circle_id\": \"b110bcae-ea27-4a0a-bbd8-e5b202dd4461\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "46"
										},
										{
											"key": "ETag",
											"value": "W/\"2e-S6ktU/kKyDAnH8el1umyRd/rvOs\""
										},
										{
											"key": "Date",
											"value": "Thu, 27 Feb 2025 07:37:28 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 400,\n    \"message\": \"Bad Request Exception\"\n}"
								},
								{
									"name": "400- (generate commission) percentage 0 value",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Cool function\",\r\n    \"trigger\": \"purchase\",\r\n    \"effect_type\": \"generate_commission\",\r\n    \"effect\": {\r\n        \"commission\": {\r\n            \"commission_type\": \"percentage\",\r\n            \"commission_value\": 0\r\n        }\r\n    },\r\n    \"conditions\": [\r\n        {\r\n            \"parameter\": \"no. of purchases\",\r\n            \"operator\": \"less_than_or_equal_to\",\r\n            \"value\": 1\r\n        }\r\n    ],\r\n    \"circle_id\": \"b110bcae-ea27-4a0a-bbd8-e5b202dd4461\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "46"
										},
										{
											"key": "ETag",
											"value": "W/\"2e-S6ktU/kKyDAnH8el1umyRd/rvOs\""
										},
										{
											"key": "Date",
											"value": "Thu, 27 Feb 2025 07:38:01 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 400,\n    \"message\": \"Bad Request Exception\"\n}"
								},
								{
									"name": "201- created (generate commission)",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Cool function\",\r\n    \"trigger\": \"purchase\",\r\n    \"effect_type\": \"generate_commission\",\r\n    \"effect\": {\r\n        \"commission\": {\r\n            \"commission_type\": \"percentage\",\r\n            \"commission_value\": 10\r\n        }\r\n    },\r\n    \"conditions\": [\r\n        {\r\n            \"parameter\": \"no. of purchases\",\r\n            \"operator\": \"less_than_or_equal_to\",\r\n            \"value\": 1\r\n        }\r\n    ],\r\n    \"circle_id\": \"b110bcae-ea27-4a0a-bbd8-e5b202dd4461\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "495"
										},
										{
											"key": "ETag",
											"value": "W/\"1ef-6a/JZn1Wpl5lOR8nMTrMySw2dy8\""
										},
										{
											"key": "Date",
											"value": "Thu, 27 Feb 2025 07:38:22 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"message\": \"Successfully created function.\",\n    \"data\": {\n        \"function_id\": \"4b13b1c5-2181-44e4-9217-ef1b8861548d\",\n        \"name\": \"Cool function\",\n        \"circle_id\": \"b110bcae-ea27-4a0a-bbd8-e5b202dd4461\",\n        \"circle_name\": \"noobs\",\n        \"effect_type\": \"generate_commission\",\n        \"effect\": {\n            \"commission\": {\n                \"commission_type\": \"percentage\",\n                \"commission_value\": 10\n            }\n        },\n        \"conditions\": [\n            {\n                \"value\": 1,\n                \"operator\": \"less_than_or_equal_to\",\n                \"parameter\": \"no. of purchases\"\n            }\n        ],\n        \"created_at\": \"13:08:22.385409+05:30\",\n        \"updated_at\": \"13:08:22.385409+05:30\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get function",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"functions",
										":function_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "function_id",
											"value": "{{function_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions",
												":function_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "function_id",
													"value": "{{function_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\" : \"Successfully got function.\",\r\n    \"data\": {\r\n        \"function\": {\r\n            \"function_id\": \"23kjnf982n3cuibn1\",\r\n            \"name\": \"Beginner function\",\r\n            \"trigger\": \"PURCHASE\",\r\n            \"commission_type\": \"FIXED\",\r\n            \"commission_value\": 50,\r\n            \"effect\": \"SWITCH_TO_DIFF_CIRCLE\",\r\n            \"conditions\": [\r\n                {\r\n                    \"parameter\": \"purchase amount\",\r\n                    \"operator\": \"greater than\",\r\n                    \"value\": 3000\r\n                }\r\n            ],\r\n            \"circle\": \"DEFAULT\"\r\n        }\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Update function",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"function\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"trigger\": { \"type\": \"string\", \"enum\": [\"signup\", \"purchase\"] },\r",
											"        \"commission_type\": { \"type\": \"string\", \"enum\": [\"fixed\", \"percentage\"] },\r",
											"        \"commission_value\": { \"type\": \"number\" },\r",
											"        \"effect\": { \"type\": \"string\" },\r",
											"        \"conditions\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"                \"type\": \"object\",\r",
											"                \"properties\": {\r",
											"                    \"parameter\": { \"type\": \"string\" },\r",
											"                    \"operator\": { \"type\": \"string\" },\r",
											"                    \"value\": { \"type\": \"string\" }\r",
											"                },\r",
											"                \"required\": [\"parameter\", \"operator\", \"value\"]\r",
											"            }\r",
											"        },\r",
											"        \"circle\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"name\", \"trigger\", \"commission_type\", \"commission_value\"]\r",
											"};\r",
											"//@endschema\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"circle_id\": \"dad6c7d4-9810-48bb-b109-7718f0f4e591\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"functions",
										":function_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "function_id",
											"value": "{{function_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Pro function\",\r\n    \"trigger\": \"CONTACT\",\r\n    \"commission_type\": \"PERCENTAGE\",\r\n    \"commission_value\": 12,\r\n    \"effect\": \"GENERATE_COMMISSION\",\r\n    \"conditions\": [\r\n        {\r\n            \"parameter\": \"No. of contacts\",\r\n            \"operator\": \"eq\",\r\n            \"value\": 10\r\n        }\r\n    ],\r\n    \"circle\": \"DEFAULT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions",
												":function_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "function_id",
													"value": "{{function_id}}"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully updated function.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Pro function\",\r\n    \"trigger\": \"CONTACT\",\r\n    \"commission_type\": \"PERCENTAGE\",\r\n    \"commission_value\": 12,\r\n    \"effect\": \"GENERATE_COMMISSION\",\r\n    \"conditions\": [\r\n        {\r\n            \"parameter\": \"No. of contacts\",\r\n            \"operator\": \"eq\",\r\n            \"value\": 10\r\n        }\r\n    ],\r\n    \"circle\": \"DEFAULT\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions",
												":function_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "function_id",
													"value": "{{function_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								},
								{
									"name": "200",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"conditions\": [\r\n        {\r\n            \"condition_id\": \"9047d4fb-07d6-4b7b-828c-74ae1c017d6d\",\r\n            \"condition\": {\r\n                \"parameter\": \"no. of purchases\",\r\n                \"operator\": \"less_than_or_equal_to\",\r\n                \"value\": 1\r\n            }\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions",
												":function_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "function_id",
													"value": "{{function_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "55"
										},
										{
											"key": "ETag",
											"value": "W/\"37-LPNjW3TzwWD//Fym7iGP2Rf3zeg\""
										},
										{
											"key": "Date",
											"value": "Fri, 28 Feb 2025 09:37:43 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"message\": \"Successfully updated function.\"\n}"
								}
							]
						},
						{
							"name": "Delete function",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"functions",
										":function_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "function_id",
											"value": "{{function_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions",
												":function_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "function_id",
													"value": "{{function_id}}"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully deleted function.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions/:function_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions",
												":function_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "function_id",
													"value": "{{function_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Get all functions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/functions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"functions"
									],
									"query": [
										{
											"key": "circle_name",
											"value": "",
											"disabled": true
										},
										{
											"key": "trigger",
											"value": "",
											"description": "signup / purchase",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										},
										{
											"key": "effect_type",
											"value": "",
											"description": "GENERATE_COMMISSION / SWITCH_TO_DIFF_CIRCLE",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/functions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"functions"
											],
											"query": [
												{
													"key": "circle_id",
													"value": "",
													"disabled": true
												},
												{
													"key": "conversion_type",
													"value": "",
													"description": "CONTACT / PURCHASE",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "",
													"disabled": true
												},
												{
													"key": "effect",
													"value": null,
													"description": "GENERATE_COMMISSION / SWITCH_TO_DIFF_CIRCLE",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all functions.\",\r\n    \"data\": {\r\n        \"functions\": [\r\n            {\r\n                \"function_id\": \"23kjnf982n3cuibn1\",\r\n                \"name\": \"Beginner function\",\r\n                \"trigger\": \"PURCHASE\",\r\n                \"commission_type\": \"FIXED\",\r\n                \"commission_value\": 50,\r\n                \"effect\": \"SWITCH_TO_DIFF_CIRCLE\",\r\n                \"conditions\": [\r\n                    {\r\n                        \"parameter\": \"purchase amount\",\r\n                        \"operator\": \"greater than\",\r\n                        \"value\": 3000\r\n                    }\r\n                ],\r\n                \"circle\": \"DEFAULT\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Webhooks",
					"item": [
						{
							"name": "Create webhook",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"url\": \"{{webhook_url}}\",\r\n    \"events\": [\r\n        \"commission.created\",\r\n        \"purchase.created\",\r\n        \"signup.created\"\r\n    ],\r\n    \"secret\": \"dev-secret12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/webhooks",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"webhooks"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all webhooks",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/webhooks",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"webhooks"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get webhook",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/webhooks/:webhook_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"webhooks",
										":webhook_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": ""
										},
										{
											"key": "webhook_id",
											"value": "{{webhook_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update webhook",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"events\": [\"commission.created\", \"signup.created\", \"purchase.created\"],\r\n    \"secret\": \"very secret\",\r\n    \"url\": \"https://webhook.site/b741bd01-4ef3-44f5-a6e9-e4e78a79c9a3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/webhooks/:webhook_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"webhooks",
										":webhook_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "webhook_id",
											"value": "{{webhook_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete webhook",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/webhooks/:webhook_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"webhooks",
										":webhook_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "webhook_id",
											"value": "{{webhook_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "API Key",
					"item": [
						{
							"name": "Generate API key",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/apikeys",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"apikeys"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update API key status",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"inactive\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/apikeys/:api_key_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"apikeys",
										":api_key_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "api_key_id",
											"value": "{{api_key_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "200- reactivated key",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"active\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/apikeys/:api_key_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"apikeys",
												":api_key_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "api_key_id",
													"value": "{{api_key_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "58"
										},
										{
											"key": "ETag",
											"value": "W/\"3a-0ljhJYcPDOHuG+ud0cXQWF4zQ1I\""
										},
										{
											"key": "Date",
											"value": "Fri, 07 Mar 2025 11:12:52 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"message\": \"Successfully reactivated api key.\"\n}"
								},
								{
									"name": "200- revoked key",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"status\": \"inactive\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/apikeys/:api_key_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"apikeys",
												":api_key_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "api_key_id",
													"value": "{{api_key_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "54"
										},
										{
											"key": "ETag",
											"value": "W/\"36-9sJg1wIrLLZNYmjLMSu18io1MlM\""
										},
										{
											"key": "Date",
											"value": "Fri, 07 Mar 2025 11:13:36 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"message\": \"Successfully revoked api key.\"\n}"
								}
							]
						},
						{
							"name": "Delete API key",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/apikeys/:api_key_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"apikeys",
										":api_key_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "api_key_id",
											"value": "{{api_key_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all API Keys",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/apikeys",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"apikeys"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{user_access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Promoter",
			"item": [
				{
					"name": "Member",
					"item": [
						{
							"name": "Member sign up",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"member\" },\r",
											"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
											"        \"password\": { \"type\": \"string\" },\r",
											"        \"first_name\": { \"type\": \"string\" },\r",
											"        \"last_name\": { \"type\": \"string\" },\r",
											"        \"role\": { \"type\": \"string\", \"enum\": [\"admin\", \"member\"] }\r",
											"    },\r",
											"    \"required\": [\"email\", \"password\", \"role\"]\r",
											"}\r",
											"//@endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@mail.com\",\r\n    \"password\": \"test\",\r\n    \"first_name\": \"test\",\r\n    \"last_name\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/members/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"members",
										"signup"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"leonardo@mail.com\",\r\n    \"password\": \"2j3n2o30j29j\",\r\n    \"first_name\": \"Leonardo\",\r\n    \"last_name\": \"Da Vinci\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/members/signup",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"members",
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully signed up member.\",\r\n    \"data\": {\r\n        \"member_id\": \"wevn1i23yd13hcoiu3bnvkn\"\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Member log in",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"member\" },\r",
											"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
											"        \"password\": { \"type\": \"string\" },\r",
											"        \"first_name\": { \"type\": \"string\" },\r",
											"        \"last_name\": { \"type\": \"string\" },\r",
											"        \"role\": { \"type\": \"string\", \"enum\": [\"admin\", \"member\"] }\r",
											"    },\r",
											"    \"required\": [\"email\", \"password\"]\r",
											"}\r",
											"//@endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {\r",
											"    const memberAccessToken = pm.response.json().data.access_token;\r",
											"    pm.environment.set('member_access_token', memberAccessToken);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@mail.com\",\r\n    \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/members/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"members",
										"login"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/members/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"members",
												"login"
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"data\": {\r\n        \"token\": \"2kj3nkj3nco9h9%^82ewh\"\r\n    },\r\n    \"message\": \"Successfully logged in member.\"\r\n}"
								},
								{
									"name": "failure- incorrect credentials",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/members/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"members",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"Incorrect credentials. Please try again.\"\r\n}"
								},
								{
									"name": "201- super admin login",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"luke@mail.com\",\r\n    \"password\": \"starwars\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/members/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"members",
												"login"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "352"
										},
										{
											"key": "ETag",
											"value": "W/\"160-f74oNa2DjUr7jJjSHqXux/HdQug\""
										},
										{
											"key": "Date",
											"value": "Tue, 04 Mar 2025 10:20:02 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"message\": \"Successfully logged in user.\",\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MzNlMmU5Yy05MmE3LTQ1MjUtODkzMi01OGRmMjM3NDZiM2MiLCJlbWFpbCI6Imx1a2VAbWFpbC5jb20iLCJpc19zdXBlcl9hZG1pbiI6ZmFsc2UsImlzX3VzZXIiOmZhbHNlLCJpYXQiOjE3NDEwODM2MDIsImV4cCI6MTc0MTE3MDAwMn0.NCy9mDzC-OIsPWCCuhcqHW8YH1HaBggCzeuncw9TVKE\"\n    }\n}"
								},
								{
									"name": "201- non super admin login",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"dan@quicko.com\",\r\n    \"password\": \"dan1234\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/members/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"members",
												"login"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "353"
										},
										{
											"key": "ETag",
											"value": "W/\"161-JWOc+Mur09Em09LQbfUeKgNaCf4\""
										},
										{
											"key": "Date",
											"value": "Tue, 04 Mar 2025 11:24:00 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 201,\n    \"message\": \"Successfully logged in user.\",\n    \"data\": {\n        \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJmYmM2YTMyNi1mM2RiLTRmNTctOGY4OC1iZWE0MzhhMjZmZmIiLCJlbWFpbCI6ImRhbkBxdWlja28uY29tIiwiaXNfc3VwZXJfYWRtaW4iOmZhbHNlLCJpc191c2VyIjpmYWxzZSwiaWF0IjoxNzQxMDg3NDQwLCJleHAiOjE3NDExNzM4NDB9.5zwcJXSKfwNiXuKq98JJzuI6-kar176HMoPLl88DYUs\"\n    }\n}"
								}
							]
						},
						{
							"name": "Get member",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/members/:member_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"members",
										":member_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "member_id",
											"value": "{{member_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/members/:member_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"members",
												":member_id"
											],
											"variable": [
												{
													"key": "member_id",
													"value": "{{member_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got member.\",\r\n    \"data\": {\r\n        \"member\": {\r\n            \"email\": \"leonardo@mail.com\",\r\n            \"password\": \"2j3n2o30j29j\",\r\n            \"first_name\": \"Leonardo\",\r\n            \"last_name\": \"Da Vinci\"\r\n        }\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Update member info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"member\" },\r",
											"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
											"        \"password\": { \"type\": \"string\" },\r",
											"        \"first_name\": { \"type\": \"string\" },\r",
											"        \"last_name\": { \"type\": \"string\" },\r",
											"        \"role\": { \"type\": \"string\", \"enum\": [\"admin\", \"member\"] }\r",
											"    },\r",
											"    \"required\": [\"email\", \"password\"]\r",
											"}\r",
											"//@endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    // \"first_name\": \"Anakin\",\r\n    // \"last_name\": \"Skywalker\",\r\n    // \"email\": \"anakin@mail.com\",\r\n    \"current_password\": \"ok\",\r\n    \"new_password\": \"starwars\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/members/:member_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"members",
										":member_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "member_id",
											"value": "{{member_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/members/:member_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"members",
												":member_id"
											],
											"variable": [
												{
													"key": "member_id",
													"value": "{{member_id}}"
												}
											]
										}
									},
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully updated member information.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/members/:member_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"members",
												":member_id"
											],
											"variable": [
												{
													"key": "member_id",
													"value": "{{member_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Delete member",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/members/:member_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"members",
										":member_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "member_id",
											"value": "{{member_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Leave Promoter",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/members/:member_id/promoters/:promoter_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"members",
										":member_id",
										"promoters",
										":promoter_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "member_id",
											"value": "{{member_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Promoter of Member",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/members/:member_id/promoter",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"members",
										":member_id",
										"promoter"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "member_id",
											"value": "{{member_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "200",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/members/:member_id/promoter",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"members",
												":member_id",
												"promoter"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "member_id",
													"value": "{{member_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "300"
										},
										{
											"key": "ETag",
											"value": "W/\"12c-D5p/haK+/1JLyRaK77by3EnIYCw\""
										},
										{
											"key": "Date",
											"value": "Mon, 24 Mar 2025 05:56:09 GMT"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Keep-Alive",
											"value": "timeout=5"
										}
									],
									"cookie": [],
									"body": "{\n    \"code\": 200,\n    \"message\": \"Successfully fetched promoter of Member 23b4bcb8-a466-46d7-b241-af3822480747.\",\n    \"data\": {\n        \"promoter_id\": \"b3096757-5c66-46da-988c-d3dcc97de48e\",\n        \"name\": \"promoter man\",\n        \"logo_url\": \"www.promoter-man.com\",\n        \"created_at\": \"2025-03-10T09:15:21.945Z\",\n        \"updated_at\": \"2025-03-10T09:15:21.945Z\"\n    }\n}"
								}
							]
						},
						{
							"name": "Check member existence in program",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"anakin@mail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/members/exists",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"members",
										"exists"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{member_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Promoter",
					"item": [
						{
							"name": "Create promoter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"promoter\" },\r",
											"        \"name\": { \"type\": \"string\" },\r",
											"        \"logo_url\": { \"type\": \"string\" }\r",
											"    },\r",
											"    \"required\": [\"name\"]\r",
											"}\r",
											"//@endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Truly Easy Trading\",\r\n    \"logo_url\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"promoter_name\": \"The Affiliate Man\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully created promoter.\",\r\n    \"data\": {\r\n        \"promoter_id\": \"jwbveie982y938yf93\"\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Update promoter info",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Vader's club\"\r\n    ,\"logo_url\": \"https://t4.ftcdn.net/jpg/03/13/36/79/360_F_313367965_7B8Y7JrJ3JAG6zdjw51L59kVQZMlA9K7.jpg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get promoter",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"promoter_name\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": ""
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got promoter.\",\r\n    \"data\": {\r\n        \"promoter\": {\r\n            \"promoter_id\": \"jwbveie982y938yf93\",\r\n            \"promoter_name\": \"The Affiliate Man\"\r\n        }\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Invite member",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"member\" },\r",
											"        \"email\": { \"type\": \"string\", \"format\": \"email\" },\r",
											"        \"password\": { \"type\": \"string\" },\r",
											"        \"first_name\": { \"type\": \"string\" },\r",
											"        \"last_name\": { \"type\": \"string\" },\r",
											"        \"role\": { \"type\": \"string\", \"enum\": [\"admin\", \"member\"] }\r",
											"    },\r",
											"    \"required\": [\"email\", \"password\"]\r",
											"}\r",
											"//@endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"boba@quicko.com\",\r\n    \"password\": \"starwars\",\r\n    \"first_name\": \"Boba\",\r\n    \"last_name\": \"Fett the great\",\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"members"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\",\r\n    \"role\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"members"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully sent an invitation.\",\r\n    \"data\": {\r\n        \"member_id\": \"wne908uj231nc23inc\"\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Update role",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"role\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members/:member_id/role",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"members",
										":member_id",
										"role"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										},
										{
											"key": "member_id",
											"value": "{{member_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"role\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members/:member_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"members",
												":member_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												},
												{
													"key": "member_id",
													"value": "{{member_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully changed user role.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"role\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members/:member_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"members",
												":member_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												},
												{
													"key": "member_id",
													"value": "{{member_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Remove member",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members/:member_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"members",
										":member_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										},
										{
											"key": "member_id",
											"value": "{{member_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members/:member_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"members",
												":member_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												},
												{
													"key": "member_id",
													"value": "{{member_id}}"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully removed member.\"\r\n}"
								},
								{
									"name": "failure- unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members/:member_id",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"members",
												":member_id"
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												},
												{
													"key": "member_id",
													"value": "{{member_id}}"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"error\": \"You are unauthorized to perform this action.\"\r\n}"
								}
							]
						},
						{
							"name": "Get all members",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members?status=active",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"members"
									],
									"query": [
										{
											"key": "role",
											"value": "",
											"description": "ADMIN / VIEWER",
											"disabled": true
										},
										{
											"key": "status",
											"value": "active",
											"description": "ACTIVE / INACTIVE"
										},
										{
											"key": "skip",
											"value": "1",
											"disabled": true
										},
										{
											"key": "take",
											"value": "1",
											"disabled": true
										},
										{
											"key": "sort_by",
											"value": "name",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "DESC",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/members",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"members"
											],
											"query": [
												{
													"key": "role",
													"value": "",
													"description": "ADMIN / MEMBER",
													"disabled": true
												},
												{
													"key": "email",
													"value": "",
													"disabled": true
												},
												{
													"key": "status",
													"value": "",
													"description": "ACTIVE / INACTIVE",
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all members.\",\r\n    \"data\": {\r\n        \"members\": [\r\n            {\r\n                \"member_id\": \"wevn1i23yd13hcoiu3bnvkn\",\r\n                \"email\": \"leonardo@mail.com\",\r\n                \"password\": \"2j3n2o30j29j\",\r\n                \"first_name\": \"Leonardo\",\r\n                \"last_name\": \"Da Vinci\"\r\n            },\r\n            {\r\n                \"member_id\": \"ebnf23n89kj-vndkv\",\r\n                \"email\": \"dwight@mail.com\",\r\n                \"password\": \"2j3n2o30j29j\",\r\n                \"first_name\": \"Dwight\",\r\n                \"last_name\": \"Schrute\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Get signups for promoter",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/signups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"signups"
									],
									"query": [
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/contacts",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"contacts"
											],
											"query": [
												{
													"key": "limit",
													"value": null,
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all contacts referred by promoter.\",\r\n    \"data\": {\r\n        \"contacts\": [\r\n            {\r\n                \"link_id\": \"12dkj3ifb893uhcv\",\r\n                \"amount\": 100,\r\n                \"email\": \"caesar@mail.com\",\r\n                \"external_id\": \"nc9183hinwde3f\"\r\n                // optionally contact_id as well\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Get purchases for promoter",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/purchases",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"purchases"
									],
									"query": [
										{
											"key": "item_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/purchases",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"purchases"
											],
											"query": [
												{
													"key": "external_id",
													"value": "",
													"disabled": true
												},
												{
													"key": "contact_id",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all purchases referred by promoter.\",\r\n    \"data\": {\r\n        \"purchases\": [\r\n            {\r\n                \"link_id\": \"2m3fj23uicbn\",\r\n                \"email\": \"caesar@mail.com\",\r\n                \"first_name\": \"Julius\",\r\n                \"last_name\": \"Caesar\",\r\n                \"phone\": \"1234567890\",\r\n                \"external_id\": \"qokicmoijv8qj\"\r\n            }\r\n        ]\r\n    }\r\n}"
								}
							]
						},
						{
							"name": "Get promoter referrals (in a program)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/referrals",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"referrals"
									],
									"query": [
										{
											"key": "sort_by",
											"value": "updatedAt",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "DESC",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get promoter referral",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/referrals/:contact_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"referrals",
										":contact_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										},
										{
											"key": "contact_id",
											"value": "{{contact_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get promoter commissions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/commissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"commissions"
									],
									"query": [
										{
											"key": "conversion_type",
											"value": "purchase",
											"description": "signup / purchase",
											"disabled": true
										},
										{
											"key": "contact_id",
											"value": "{{contact_id}}",
											"disabled": true
										},
										{
											"key": "link_id",
											"value": "{{link_id}}",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "0",
											"disabled": true
										},
										{
											"key": "take",
											"value": "5",
											"disabled": true
										},
										{
											"key": "sort_by",
											"value": "createdAt",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "DESC",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/commissions",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"programs",
												":program_id",
												"promoters",
												":promoter_id",
												"commissions"
											],
											"query": [
												{
													"key": "conversion_type",
													"value": "",
													"description": "CONTACT / PURCHASE",
													"disabled": true
												},
												{
													"key": "conversion_id",
													"value": "",
													"disabled": true
												},
												{
													"key": "limit",
													"value": null,
													"disabled": true
												},
												{
													"key": "offset",
													"value": null,
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "program_id",
													"value": "{{program_id}}"
												},
												{
													"key": "promoter_id",
													"value": "{{promoter_id}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": null,
									"header": null,
									"cookie": [],
									"body": "{\r\n    \"message\": \"Successfully got all commissions for promoter.\",\r\n    \"data\": [\r\n        \"commissions\": [\r\n            {\r\n                \"commission_id\": \"123\",\r\n                \"conversion_id\": \"233v4g23f\",\r\n                \"conversion_type\": \"CONTACT\",\r\n                \"amount\": 50\r\n            },\r\n            {\r\n                \"commission_id\": \"457\",\r\n                \"conversion_id\": \"23983hc9cn\",\r\n                \"conversion_type\": \"PURCHASE\",\r\n                \"amount\": 80\r\n            }\r\n        ]\r\n    ]\r\n}"
								}
							]
						},
						{
							"name": "Get signups report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/reports/signups?report_period=last_30_days&start_date=2025-03-01T14:43:05.861Z&end_date=2025-03-31T14:43:05.862Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"reports",
										"signups"
									],
									"query": [
										{
											"key": "report_period",
											"value": "last_30_days"
										},
										{
											"key": "start_date",
											"value": "2025-03-01T14:43:05.861Z"
										},
										{
											"key": "end_date",
											"value": "2025-03-31T14:43:05.862Z"
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get purchases report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/reports/purchases?start_date=2025-03-11T09:23:42.473Z&end_date=2025-04-15T09:23:42.473Z",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"reports",
										"purchases"
									],
									"query": [
										{
											"key": "start_date",
											"value": "2025-03-11T09:23:42.473Z"
										},
										{
											"key": "end_date",
											"value": "2025-04-15T09:23:42.473Z"
										},
										{
											"key": "report_period",
											"value": "last_90_days",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get commissions report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/reports/commissions?report_period=last_7_days&start_date&end_date",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"reports",
										"commissions"
									],
									"query": [
										{
											"key": "report_period",
											"value": "last_7_days"
										},
										{
											"key": "start_date",
											"value": null
										},
										{
											"key": "end_date",
											"value": null
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get links report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/reports/links",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"reports",
										"links"
									],
									"query": [
										{
											"key": "report_period",
											"value": "last_90_days",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get promoter analytics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/analytics",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"analytics"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get promoter link analytics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-accept-type",
										"value": "application/json;format=sheet-json",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/link_analytics",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"link_analytics"
									],
									"query": [
										{
											"key": "skip",
											"value": "2",
											"disabled": true
										},
										{
											"key": "take",
											"value": "2",
											"disabled": true
										},
										{
											"key": "sort_by",
											"value": "createdAt",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "ASC",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete promoter",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Register for program",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accepted_terms_and_conditions\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"register"
									],
									"query": [
										{
											"key": "accepted_tnc",
											"value": "true",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{member_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Link",
					"item": [
						{
							"name": "Create link",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//@schema\r",
											"const requestSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"        \"@entity\": { \"default\": \"link\" },\r",
											"        \"name\": {\r",
											"            \"type\": \"string\"\r",
											"        },\r",
											"        \"url\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": { \"type\": \"string\" }\r",
											"        }\r",
											"    },\r",
											"    \"required\": [\"name\", \"url\"]\r",
											"}\r",
											"// @endschema"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ref_val\": \"why-1aa42rk\",\r\n    \"name\": \"why\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/links",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"links"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a link",
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/links/:link_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"links",
										":link_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										},
										{
											"key": "link_id",
											"value": "{{link_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all links",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/links",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"links"
									],
									"query": [
										{
											"key": "skip",
											"value": "",
											"disabled": true
										},
										{
											"key": "take",
											"value": "",
											"disabled": true
										},
										{
											"key": "name",
											"value": null,
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get link",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/programs/:program_id/promoters/:promoter_id/links/:link_id",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"programs",
										":program_id",
										"promoters",
										":promoter_id",
										"links",
										":link_id"
									],
									"variable": [
										{
											"key": "program_id",
											"value": "{{program_id}}"
										},
										{
											"key": "promoter_id",
											"value": "{{promoter_id}}"
										},
										{
											"key": "link_id",
											"value": "{{link_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{user_access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Open API",
			"item": [
				{
					"name": "Purchase",
					"item": [
						{
							"name": "Create Purchase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ref_val\": \"aditya\",\r\n    \"amount\": {{$randomInt}},\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phone\": \"1234567890\",\r\n    \"external_id\": \"nice_external_id\",\r\n    \"item_id\": \"1234nice\",\r\n    \"utm_params\": {\r\n        \"utm_id\": \"2345\",\r\n        \"utm_source\": \"instagram\",\r\n        \"utm_medium\": \"social\",\r\n        \"utm_campaign\": \"fireship\",\r\n        \"utm_term\": \"ok\",\r\n        \"utm_content\": \"logolink\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/purchases",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"purchases"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Signup",
					"item": [
						{
							"name": "Create Signup",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{api_key}}",
										"type": "text"
									},
									{
										"key": "x-api-secret",
										"value": "{{api_secret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ref_val\": \"aditya\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"{{$randomFirstName}}\",\r\n    \"last_name\": \"{{$randomLastName}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"utm_params\": {\r\n        \"utm_id\": \"2345\",\r\n        \"utm_source\": \"instagram\",\r\n        \"utm_medium\": \"social\",\r\n        \"utm_campaign\": \"fireship\",\r\n        \"utm_term\": \"ok\",\r\n        \"utm_content\": \"logolink\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/signups",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"signups"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "program_id",
			"value": "189bc46d-cd71-4515-90c3-06f587f1bc22",
			"type": "string"
		},
		{
			"key": "user_access_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MmRiYzA1OC03NmUyLTQ5MTUtYTVmNy1iODMyYWE5NTUyNDciLCJlbWFpbCI6ImpvaG5AbWFpbC5jb20iLCJhdWQiOiJwcm9ncmFtX3VzZXIiLCJpYXQiOjE3NDUyMTM3NzMsImV4cCI6MTc0NzgwNTc3M30.HsDfT84h9yNznp3E5zzucaAgdFb_EJU64tOn3TY9SMg",
			"type": "string"
		},
		{
			"key": "webhook_url",
			"value": "",
			"type": "string"
		},
		{
			"key": "webhook_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_role",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_status",
			"value": "",
			"type": "string"
		},
		{
			"key": "promoter_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "member_id",
			"value": "c57238c8-02d2-46c6-94ea-7d1290c2cadb",
			"type": "string"
		},
		{
			"key": "circle_id",
			"value": "c57238c8-02d2-46c6-94ea-7d1290c2cadb",
			"type": "string"
		},
		{
			"key": "program",
			"value": "null"
		},
		{
			"key": "user_id",
			"value": "52dbc058-76e2-4915-a5f7-b832aa955247",
			"type": "string"
		},
		{
			"key": "referral_key_type",
			"value": "phone",
			"type": "string"
		}
	]
}